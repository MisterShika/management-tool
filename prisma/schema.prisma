generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessLevel {
  ADMIN
  STAFF
}

/// Represents a user of the system (admin or staff)
model User {
  id                 Int         @id @default(autoincrement())  // user ID
  userCode           String      @unique @db.VarChar(4)
  firstName          String
  firstNameFurigana  String
  lastName           String
  lastNameFurigana   String
  pin                String      @db.VarChar(4)
  access             AccessLevel @default(STAFF)
  createdAt          DateTime    @default(now())
}

enum Gender {
  MALE
  FEMALE
  UNSPECIFIED
}

enum SchoolType {
  ELEMENTARY
  MIDDLE
  HIGH
  OTHER
}

/// Represents a student enrolled in the school/program.
/// Stores personal information (names with furigana, birthday, address),
/// current school and grade, and tracks last edited timestamp.
/// Related visits are also connected to this student.
model Student {
  id                Int        @id @default(autoincrement())
  firstName         String
  lastName          String
  firstNameFurigana String
  lastNameFurigana  String
  birthday          DateTime
  address           String
  school            String
  schoolType        SchoolType?
  grade             String
  gender            Gender?    // optional
  lastEdited        DateTime   @updatedAt
  visits            Visit[]    // relationship to Visit
  color             String     @default("#000000") // default black, will overwrite in seed or API
  isActive          Boolean    @default(true) // indicates if the student is currently active
}

enum VisitStatus {
  PLANNED
  COMPLETED
  CANCELLED
}

/// Represents a student visit to the building.
/// Can optionally have a lesson and a daily report attached.
model Visit {
  id           Int                @id @default(autoincrement())
  student      Student            @relation(fields: [studentId], references: [id])
  studentId    Int
  date         DateTime
  status       VisitStatus        @default(PLANNED)
  lesson       Lesson?            @relation(fields: [lessonId], references: [id])
  lessonId     Int?               // optional if no lesson for this visit
  dailyReport  DailyReport?       // one-to-one relation
  completions  LessonCompletion[] // back-relation for tracking lessons
}

/// Represents a report for a visit (e.g., how a student did that day)
model DailyReport {
  id       Int    @id @default(autoincrement())
  visit    Visit  @relation(fields: [visitId], references: [id])
  visitId  Int    @unique // ensures one report per visit
  note     String
}

/// Represents a lesson that can be assigned to a visit
model Lesson {
  id          Int                @id @default(autoincrement())
  name        String
  description String?
  visits      Visit[]            // back-relation
  completions LessonCompletion[] // back-relation for tracking completions
}

/// Connects lessons to visits for historical tracking (optional)
model LessonCompletion {
  id          Int      @id @default(autoincrement())
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    Int
  visit       Visit    @relation(fields: [visitId], references: [id])
  visitId     Int
  completedAt DateTime @default(now())
}
